#BlueJ class context
comment0.target=Game
comment0.text=\n\ The\ class\ that\ represents\ the\ game\ state\ and\ workflow.\ The\ main\ data\ structure\ in\ \n\ this\ program\ is\ the\ game\ board.\ Game\ uses\ a\ 2D-array\ of\ characters\ to\ represent\ it.\n\ @author\ Klaire\ Pham\ \n
comment1.params=boardSize
comment1.target=Game(int)
comment1.text=\ Constructor\ for\ objects\ of\ class\ Game\n\ @param\ boardSize\ -\ the\ game\ board\ size,\ which\ will\ be\ a\ boardSize\ x\ boardSize\ matrix\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\ Runs\ consecutive\ Tic-tac-toe\ games\ until\ the\ user\ gets\ tired\ and\ quits.\ \n\ When\ the\ user\ quits,\ the\ win-loss-tie\ statistics\ are\ printed.\n\ @param\ args\ -\ The\ first\ argument\ represents\ the\ desired\ game\ board\ size,\ \n\ which\ should\ be\ an\ integer\ in\ [1,9].\ If\ the\ provided\ board\ size\ does\ not\ comply\ \n\ with\ these\ rules\ or\ if\ no\ argument\ is\ provided,\ a\ default\ game\ board\ size\ of\ \n\ 3\ x\ 3\ will\ be\ used.\n
comment3.params=move\ symbol
comment3.target=boolean\ executeMove(Move,\ char)
comment3.text=\ Executes\ the\ move\ passed\ as\ an\ argument.\ If\ the\ move\ is\ invalid\ it\ returns\ false\n\ @param\ move\ -\ the\ move\ to\ be\ executed\n\ @param\ symbol\ -\ the\ symbol\ of\ the\ player\ is\ making\ the\ move\ \n\ @return\ true\ if\ the\ move\ was\ successfully\ executed\n
comment4.params=
comment4.target=int\ getBoardSize()
comment4.text=\ Returns\ the\ game\ board\ size\ \n\ @return\ the\ game\ board\ size\ \n
comment5.params=
comment5.target=char\ getGameStatus()
comment5.text=\ A\ method\ that\ analyzes\ the\ board\ to\ determine\ the\ current\ game\ state,\ which\ \n\ is\ then\ returned\ as\ a\ character.\ A\ game\ is\ over\ if\ either\ player\ has\ completed\ \n\ a\ row,\ a\ line,\ or\ a\ diagonal.\ Moreover,\ a\ game\ is\ also\ over\ if\ the\ board\ is\ \n\ full,\ even\ if\ no\ player\ completed\ a\ row,\ line,\ or\ diagonal.\ That\ indicates\ a\ \n\ tie\ situation.\n\ @return\ A\ character\ indicating\ the\ game\ state\:\ '?'\ if\ the\ game\ isn't\ over\ yet,\ \n\ 'T'\ if\ the\ game\ is\ over\ and\ tied,\ or,\ if\ a\ player\ won,\ the\ winning\ player's\ \n\ symbol\ ('X'\ or\ 'O').\n
comment6.params=move
comment6.target=char\ isValidMove(Move)
comment6.text=\ Validates\ a\ potential\ move.\ Returns\ 'V'\ if\ the\ move\ is\ valid,\ or\ a\ different\ \n\ character\ indicating\ the\ reason\ why\ the\ move\ is\ invalid\n\ @param\ move\ -\ the\ move\ to\ be\ validated\n\ @return\ 'V'\ is\ move\ is\ valid,\ 'R'\ if\ it\ specifies\ an\ invalid\ row,\ 'C'\ if\ it\ \n\ specifies\ an\ invalid\ column,\ or\ 'O'\ if\ it\ refers\ to\ an\ already-occupied\ \n\ position.\n
comment7.params=
comment7.target=char\ playSingleGame()
comment7.text=\ Plays\ a\ single\ game\ of\ Tic-tac-toe\ by\ having\ players\ pick\ moves\ in\ turn.\ \n\ The\ first\ player\ to\ play\ is\ choosen\ uniformly\ at\ random.\n\ @return\ 'H'\ if\ the\ human\ player\ won,\ 'C'\ if\ the\ CPU\ won,\ 'T'\ if\ there\ was\ a\ \n\ tie,\ or\ 'Q'\ if\ the\ human\ quit\ the\ game.\n
comment8.params=
comment8.target=void\ resetGame()
comment8.text=\ Reset\ the\ game\ so\ we\ can\ play\ again\ \n\ \n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\ Creates\ a\ textual\ representation\ of\ the\ game\ board\ in\ the\ suitable\ format.\ \n\ \ \ \ \ 1\ \ \ 2\ \ \ 3\n\ \ A\ \ X\ |\ O\ |\ O\ \n\ \ \ \ ---|---|---\n\ \ B\ \ \ \ |\ X\ |\ \ \ \n\ \ \ \ ---|---|---\n\ \ C\ \ O\ |\ \ \ |\ X\ \n\ @override\ toString\ in\ class\ Object\n\ @return\ A\ String\ representing\ the\ game\ board\ in\ the\ aforementioned\ format/\n
numComments=10
